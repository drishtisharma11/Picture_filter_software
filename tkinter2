import PIL


from tkinter import *
from tkinter import filedialog


from PIL import Image
from PIL import ImageTk
from PIL import ImageFilter
import cv2

from skimage import filters
import skimage


import mahotas
import mahotas.demos


import numpy as np


import matplotlib.pyplot
from matplotlib.backends.backend_tkagg import FigureCanvasTkAgg
from matplotlib.figure import Figure



def upload():
    global panelA, panelB, image, canvas, draw_image
    f_types = [('Jpg Files', '.jpg'),('PNG Files','.png')] 
    path = filedialog.askopenfilename(filetypes=f_types)
    image = cv2.imread(path) 
    image = cv2.resize(image, (500,500))
    image = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)
    
    image1 = Image.fromarray(image)
    image1 = ImageTk.PhotoImage(image1)
    panelA = Label(image=image1, borderwidth=5, relief="sunken")
    panelA.image = image1
    panelA.grid(row= 2, column=1 , rowspan= 13, columnspan= 3, padx=20, pady=20)
    return image

def grayscale():
    grayimg= cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)
    grayimg1= Image.fromarray(grayimg)
    grayimg1= ImageTk.PhotoImage(grayimg1)


    panelB = Label(image=grayimg1, borderwidth=5, relief="sunken")
    panelB.image = grayimg1
    panelB.grid(row= 2, column=4 , rowspan= 13,columnspan= 3, padx=20, pady=20)
    return grayimg

def negative():
    neg= 255 - image
    neg1= Image.fromarray(neg)
    neg1= ImageTk.PhotoImage(neg1)



    panelB = Label(image=neg1, borderwidth=5, relief="sunken")
    panelB.image = neg1
    panelB.grid(row= 2, column=4 , rowspan= 13,columnspan= 3, padx=20, pady=20)
    return neg

def threshold():
    image = grayscale()
    ret, thresh = cv2.threshold(image, 127, 255, cv2.THRESH_BINARY)
    thresh1= Image.fromarray(thresh)
    thresh1= ImageTk.PhotoImage(thresh1)


    panelB = Label(image=thresh1, borderwidth=5, relief="sunken")
    panelB.image = thresh1
    panelB.grid(row= 2, column=4 , rowspan= 13,columnspan= 3, padx=20, pady=20)
    return thresh

def redext():
    row,col,plane = image.shape
    red = np.zeros((row,col,plane),np.uint8)
    red[:,:,0] = image[:,:,0]
    red1 = Image.fromarray(red)
    red1= ImageTk.PhotoImage(red1)
    panelB = Label(image=red1, borderwidth=5, relief="sunken")
    panelB.image = red1
    panelB.grid(row= 2, column=4 , rowspan= 13,columnspan= 3, padx=20, pady=20)
    return red

def greenext():
    row,col,plane = image.shape
    green= np.zeros((row,col,plane),np.uint8)
    green[:,:,1] = image[:,:,1]
    green1 = Image.fromarray(green)
    green1= ImageTk.PhotoImage(green1)
    panelB = Label(image=green1, borderwidth=5, relief="sunken")
    panelB.image = green1
    panelB.grid(row= 2, column=4 , rowspan= 13,columnspan= 3, padx=20, pady=20)   
    return green

def blueext():
    row,col,plane = image.shape   
    blue = np.zeros((row,col,plane),np.uint8)
    blue[:,:,2] = image[:,:,2]
    blue1 = Image.fromarray(blue)
    blue1= ImageTk.PhotoImage(blue1)
    panelB = Label(image=blue1, borderwidth=5, relief="sunken")
    panelB.image = blue1
    panelB.grid(row= 2, column=4 , rowspan= 13,columnspan= 3, padx=20, pady=20)
    return blue   

def edge():
    image = threshold()
    edged = cv2.Canny(image, 50, 100)
    edged1 = Image.fromarray(edged)
    edged1= ImageTk.PhotoImage(edged1)


    panelB = Label(image=edged1, borderwidth=5, relief="sunken")
    panelB.image = edged1
    panelB.grid(row= 2, column=4 , rowspan= 13,columnspan= 3, padx=20, pady=20)
    return edged

def skeleton():
    image = threshold()
    skel = np.zeros(image.shape, np.uint8)
    element = cv2.getStructuringElement(cv2.MORPH_CROSS, (3,3))
    
    while True:
        open = cv2.morphologyEx(image, cv2.MORPH_OPEN, element)
        temp = cv2.subtract(image, open)
        eroded = cv2.erode(image, element)
        skel = cv2.bitwise_or(skel,temp)
        image = eroded.copy()
        if cv2.countNonZero(image)==0:
            break
            
    skel1= Image.fromarray(skel)
    skel1= ImageTk.PhotoImage(skel1)
    panelB = Label(image=skel1, borderwidth=5, relief="sunken")
    panelB.image = skel1
    panelB.grid(row= 2, column=4 , rowspan= 13,columnspan= 3, padx=20, pady=20)
    return skel

def denoise():
    denoise = cv2.fastNlMeansDenoisingColored(image,None,5,5,7,21)
    denoise1 = Image.fromarray(denoise)
    denoise1= ImageTk.PhotoImage(denoise1)


    panelB = Label(image=denoise1, borderwidth=5, relief="sunken")
    panelB.image = denoise1
    panelB.grid(row= 2, column=4 , rowspan= 13,columnspan= 3, padx=20, pady=20)
    return denoise

def sharp():
    kernel = np.array([[0, -1, 0], [-1, 5,-1], [0, -1, 0]])
    sharpened = cv2.filter2D(image, ddepth=-1, kernel=kernel)
    sharpened1 = Image.fromarray(sharpened)
    sharpened1= ImageTk.PhotoImage(sharpened1)



    panelB = Label(image=sharpened1, borderwidth=5, relief="sunken")
    panelB.image = sharpened1
    panelB.grid(row= 2, column=4 , rowspan= 13,columnspan= 3, padx=20, pady=20)
    return sharpened

def histo():
    histogram = cv2.cvtColor(image, cv2.COLOR_BGR2YUV)
    histogram [:,:,0] = cv2.equalizeHist(histogram [:,:,0])
    histogram = cv2.cvtColor(histogram, cv2.COLOR_YUV2BGR)
    histogram1 = Image.fromarray(histogram)
    histogram1= ImageTk.PhotoImage(histogram1)


    panelB = Label(image=histogram1, borderwidth=5, relief="sunken")
    panelB.image = histogram1
    panelB.grid(row= 2, column=4 , rowspan= 13,columnspan= 3, padx=20, pady=20)
    return histogram

def powerlawtrans():
    gammaplt = np.array(255*(image/255)**2.05,dtype='uint8')
    gammaplt1 = Image.fromarray(gammaplt)
    gammaplt1= ImageTk.PhotoImage(gammaplt1)

    
    panelB = Label(image=gammaplt1, borderwidth=5, relief="sunken")
    panelB.image = gammaplt1
    panelB.grid(row= 2, column=4 , rowspan= 13,columnspan= 3, padx=20, pady=20)
    return gammaplt

def maskimg():  
    x, y , w, h = cv2.selectROI(image)
    start = (x, y)
    end = (x + w, y + h)
    rect = (x, y , w, h)
    cv2.rectangle(image, start, end, (0,0,255), 3)
    mask = np.zeros(image.shape[:2], np.uint8)  
    bgdModel = np.zeros((1, 65), np.float64)
    fgdModel = np.zeros((1, 65), np.float64)    
    cv2.grabCut(image, mask, rect, bgdModel, fgdModel, 100, cv2.GC_INIT_WITH_RECT)
    cv2.waitKey(0)
    cv2.destroyAllWindows()  
    mask1 = np.where((mask == 2) | (mask == 0), 0, 1).astype('uint8')
    maskimage = image * mask1[:, :, np.newaxis] 
    maskimage1 = Image.fromarray(maskimage)
    maskimage1= ImageTk.PhotoImage(maskimage1)
    panelB = Label(image=maskimage1, borderwidth=5, relief="sunken")
    panelB.image = maskimage1
    panelB.grid(row= 2, column=4 , rowspan= 13,columnspan= 3, padx=20, pady=20)
    return maskimage

def pencil():
    img=grayscale()
    img_invert = cv2.bitwise_not(img)
    img_smoothing = cv2.GaussianBlur(img_invert, (25, 25),sigmaX=0, sigmaY=0)
    pencilimg = cv2.divide(img, 255 - img_smoothing, scale=255)
    pencilimg1= Image.fromarray(pencilimg)
    pencilimg1= ImageTk.PhotoImage(pencilimg1)
    panelB = Label(image=pencilimg1, borderwidth=5, relief="sunken")
    panelB.image = pencilimg1
    panelB.grid(row= 2, column=4 , rowspan= 13,columnspan= 3, padx=20, pady=20)
    return pencilimg

def colpencil():
    img_invert = cv2.bitwise_not(image)
    img_smoothing = cv2.GaussianBlur(img_invert, (21, 21),sigmaX=0, sigmaY=0)
    colpencilimg = cv2.divide(image, 255- img_smoothing, scale=255)
    colpencilimg1= Image.fromarray(colpencilimg) 
    colpencilimg1= ImageTk.PhotoImage(colpencilimg1)
    panelB = Label(image=colpencilimg1, borderwidth=5, relief="sunken")
    panelB.image = colpencilimg1
    panelB.grid(row= 2, column=4 , rowspan= 13,columnspan= 3, padx=20, pady=20)    
    return colpencilimg

def cartoon():
    gray=grayscale()
    gray = cv2.medianBlur(gray, 5)
    edges = cv2.adaptiveThreshold(gray, 255, cv2.ADAPTIVE_THRESH_MEAN_C, cv2.THRESH_BINARY, 9, 9)
    color = cv2.bilateralFilter(image, 9, 250, 250)
    cartoon = cv2.bitwise_and(color, color, mask=edges)
    cartoon1= Image.fromarray(cartoon)
    cartoon1= ImageTk.PhotoImage(cartoon1)
    panelB = Label(image=cartoon1, borderwidth=5, relief="sunken")
    panelB.image = cartoon1
    panelB.grid(row= 2, column=4 , rowspan= 13,columnspan= 3, padx=20, pady=20)
    return cartoon

def watercolor():
    watercolor = cv2.stylization(image, sigma_s=100, sigma_r=0.45)
    watercolor1= Image.fromarray(watercolor)
    watercolor1= ImageTk.PhotoImage(watercolor1)
    panelB = Label(image=watercolor1, borderwidth=5, relief="sunken")
    panelB.image = watercolor1
    panelB.grid(row= 2, column=4 , rowspan= 13,columnspan= 3, padx=20, pady=20)
    return watercolor

def emboss():
    kernel = np.array([[0,-1,-1],[1,0,-1],[1,1,0]])
    emboss = cv2.filter2D(image, kernel=kernel, ddepth=-1)
    emboss= cv2.cvtColor(emboss, cv2.COLOR_BGR2GRAY)
    emboss=255-emboss
    emboss1= Image.fromarray(emboss)
    emboss1= ImageTk.PhotoImage(emboss1)
    panelB = Label(image=emboss1, borderwidth=5, relief="sunken")
    panelB.image = emboss1
    panelB.grid(row= 2, column=4 , rowspan= 13,columnspan= 3, padx=20, pady=20)
    return emboss

def exitt():
    root.quit()

def demo():
    upload()

def about():
    pass

def add_title_labels():
    # Add title to input image
    input_title = Label(root, text="Input Image", fg="black", bg="white", font=('Verdana', 14))
    input_title.grid(row=1, column=1, columnspan=3, padx=20, pady=20)
    output_title = Label(root, text="Output Image", fg="black", bg="white", font=('Verdana', 14))
    output_title.grid(row=1, column=4, columnspan=3, padx=20, pady=20)
def inpaint():
    global image
    if image is None:
        return
    # Load mask image for inpainting
    mask_path = filedialog.askopenfilename(title="Select Mask Image", filetypes=[("PNG Files", "*.png")])
    if not mask_path:
        return
    mask = cv2.imread(mask_path, cv2.IMREAD_GRAYSCALE)
    mask = cv2.resize(mask, (image.shape[1], image.shape[0]))
    inpainted_image = cv2.inpaint(image, mask, inpaintRadius=3, flags=cv2.INPAINT_TELEA)
    inpainted_image1 = Image.fromarray(inpainted_image)
    inpainted_image1 = ImageTk.PhotoImage(inpainted_image1)
    panelB = Label(image=inpainted_image1, borderwidth=5, relief="sunken")
    panelB.image = inpainted_image1
    panelB.grid(row=2, column=4, rowspan=13, columnspan=3, padx=20, pady=20)
    return inpainted_image
def deblur():
    global image
    if image is None:
        return
    deblurred_image = cv2.GaussianBlur(image, (5, 5), 0)
    deblurred_image1 = Image.fromarray(deblurred_image)
    deblurred_image1 = ImageTk.PhotoImage(deblurred_image1)
    panelB = Label(image=deblurred_image1, borderwidth=5, relief="sunken")
    panelB.image = deblurred_image1
    panelB.grid(row=2, column=4, rowspan=13, columnspan=3, padx=20, pady=20)
    return deblurred_image
def histogram():
    hist = cv2.calcHist([image], [0], None, [256], [0, 256])
    height, width, _ = image.shape
    fig = Figure(figsize=(width/100, height/100), dpi=100)
    #fig = Figure(figsize=(5, 4), dpi=100)
    ax = fig.add_subplot(111)
    ax.plot(hist)
    canvas = FigureCanvasTkAgg(fig, master=root)
    canvas.draw()
    canvas.get_tk_widget().grid(row=2, column=4, rowspan=13, columnspan=3, padx=20, pady=20)
root = Tk()
root.title("IMAGE PROCESSING")
my_menu=Menu(root)
root.config(menu=my_menu)
File_menu=Menu(my_menu)
my_menu.add_cascade(label="File",menu=File_menu)
'''File_menu.add_cascade(label="New",command=demo)'''
File_menu.add_cascade(label="Open",command=demo)
File_menu.add_cascade(label="Exit",command=exitt)
edit_menu=Menu(my_menu)
my_menu.add_cascade(label="Tools",menu=edit_menu)
edit_menu.add_cascade(label="GRAYSCALE",command=grayscale)
edit_menu.add_separator()
edit_menu.add_cascade(label="INVERT COLOR",command=negative)
edit_menu.add_separator()
edit_menu.add_cascade(label="RED ATTRIBUTES",command=redext)
edit_menu.add_separator()
edit_menu.add_cascade(label="GREEN ATTRIBUTES",command=greenext)
edit_menu.add_separator()
edit_menu.add_cascade(label="BLUE ATTRIBUTES",command=blueext)
edit_menu.add_separator()
edit_menu.add_cascade(label="BINARY",command=threshold)
edit_menu.add_separator()
edit_menu.add_cascade(label="EDGE DETECTION",command=edge)
edit_menu.add_separator()
edit_menu.add_cascade(label="SKELETON",command=skeleton)
edit_menu.add_separator()
edit_menu.add_cascade(label="POWER LAW TRANSFORMATION",command=powerlawtrans)
edit_menu.add_separator()
edit_menu.add_cascade(label="CONTRAST ENHANCEMENT",command=histo)
edit_menu.add_separator()
edit_menu.add_cascade(label="SHARPENING",command=sharp)
edit_menu.add_separator()
edit_menu.add_cascade(label="SMOOTHENING",command=denoise)
edit_menu.add_separator()
edit_menu.add_cascade(label="REMOVE BACKGROUND",command=maskimg)
edit_menu.add_separator()
edit_menu.add_cascade(label="PENCIL SKETCH",command=pencil)
edit_menu.add_separator()
edit_menu.add_cascade(label="COLOR PENCIL SKETCH",command=colpencil)
edit_menu.add_separator()
edit_menu.add_cascade(label="CARTOONIFY",command=cartoon)
edit_menu.add_separator()
edit_menu.add_cascade(label="WATERCOLOR",command=watercolor)
edit_menu.add_separator()
edit_menu.add_cascade(label="EMBOSS",command=emboss)
edit_menu.add_separator()
edit_menu.add_cascade(label="INPAINT", command=inpaint)
edit_menu.add_separator()
edit_menu.add_cascade(label="DEBLUR", command=deblur)
edit_menu.add_cascade(label="HISTOGRAM",command=histogram)
about_menu=Menu(my_menu)
my_menu.add_cascade(label="About",menu=about_menu)
about_menu.add_cascade(label="THEORY",command=about)
l1= Label(root, text="CLICK THE TOOLS TO PERFORM THE FUNCTIONALITIES MENTIONED",
           fg="white", bg="gray", width= 98, borderwidth=5, relief="groove",  font =('Verdana', 15))
l1.grid(row= 0, column= 1, columnspan= 6, padx=20, pady=20, sticky='nesw')
btn= Button(root, text="UPLOAD", fg="black", bg="lavender", command=upload)
btn.grid(row= 1, column= 0, padx=10, pady=10, sticky='nesw')
add_title_labels()
root.mainloop()